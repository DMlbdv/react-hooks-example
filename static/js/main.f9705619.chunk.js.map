{"version":3,"sources":["hooks/reducers.js","hooks/useAPI.js","components/chart-component/ChartComponent.js","utils/index.js","mappers/index.js","CONSTS.js","components/city-data/CityData.js","App.js","serviceWorker.js","index.js"],"names":["fetchReducer","state","action","type","isLoading","isError","data","payload","Error","initialState","useAPI","url","useReducer","dispatch","useEffect","a","async","fetch","then","resp","json","result","fetchData","Chart","className","width","height","margin","top","dataKey","stackId","fill","position","zeroCondition","min","max","cityDataToFE","status","timeseries","arr","reduce","acc","it","console","log","val","findMinMax","series","sort","time1","time2","Date","getTime","sortTimeSeries","map","date","value","dateFormat","BASE_URL","API","CITY_DATA","CITY_LIST","CityData","cityList","cityId","counryName","list","id","find","item","title","error","getName","App","useState","city","setCity","label","onChange","options","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAAaA,EAAe,SAACC,EAAOC,GAChC,OAAQA,EAAOC,MACX,IAAK,aACD,OAAO,eACAF,EADP,CAEIG,WAAW,EACXC,SAAS,IAEjB,IAAK,gBACD,OAAO,eACAJ,EADP,CAEIG,WAAW,EACXC,SAAS,EACTC,KAAMJ,EAAOK,UAErB,IAAK,gBACD,OAAO,eACAN,EADP,CAEIG,WAAW,EACXC,SAAS,IAEjB,QACI,MAAM,IAAIG,QClBhBC,EAAe,CACjBL,WAAW,EACXC,SAAS,EACTC,KAAM,IA8BKI,MA3Bf,YAA0B,IAARC,EAAO,EAAPA,IAAO,EACKC,qBAAWZ,EAAcS,GAD9B,mBACdR,EADc,KACPY,EADO,KAwBrB,OArBAC,qBAAU,YACY,mBAAAC,EAAAC,OAAA,uDACdH,EAAS,CACLV,KAAM,eAFI,oBAAAY,EAAA,MAKWE,MAAM,GAAD,OAAIN,IAAOO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAL7C,OAKJC,EALI,OAMVR,EAAS,CACLV,KAAM,gBACNI,QAASc,IARH,gDAWVR,EAAS,CACLV,KAAM,kBAZA,wDAiBlBmB,KACD,CAACX,IAEGV,G,QC9BI,SAASsB,EAAT,GAA0B,IAATjB,EAAQ,EAARA,KAC5B,OACI,yBAAKkB,UAAU,oBACX,kBAAC,IAAD,CACIC,MAAO,IACPC,OAAQ,IACRpB,KAAMA,EACNqB,OAAQ,CAAEC,IAAK,KAEf,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,CAAKA,QAAQ,QAAQC,QAAQ,QAAQC,KAAK,WACtC,kBAAC,IAAD,CAAWF,QAAQ,QAAQG,SAAS,W,YCF3CC,EAAgB,CAAEC,IAAK,KAAMC,IAAK,M,kBCVlCC,EAAe,SAAA9B,GAAS,IACzB+B,EAAuB/B,EAAvB+B,OAAQC,EAAehC,EAAfgC,WADgB,EDeV,WAAe,IAAdC,EAAa,uDAAP,GAC7BA,EAAIC,QACA,SAACC,EAAKC,GACFC,QAAQC,IAAIF,GADH,IAEAG,EAFA,YAEOH,EAFP,MAGDR,EAAaO,EAAbP,IAAKC,EAAQM,EAARN,IAEb,OAAKD,EAEE,eACAO,EADP,CAEIP,IAAKW,EAAMX,EAAMW,EAAMX,EACvBC,IAAKU,EAAMV,EAAMU,EAAMV,IALV,CAAED,IAAKW,EAAKV,IAAKU,KAQtCZ,GC5BiBa,CAAWR,GAGhC,MAAO,CACHJ,IAN4B,EAExBA,IAKJC,IAP4B,EAEnBA,IAMTE,SACAU,OD2BsB,WAAkB,IAAjBA,EAAgB,uDAAP,GACpC,OAAOA,EAAOC,MACV,kBAAEC,EAAF,oBAAWC,EAAX,2BACI,IAAIC,KAAKF,GAAOG,UAAY,IAAID,KAAKD,GAAOE,aCpC3BC,CAAef,GAMXgB,KAAI,mCAAEC,EAAF,KAAQC,EAAR,WAAoB,CAC7CD,KAAME,IAAWF,EAAM,eACvBC,cCdCE,EAAW,wCAEXC,EAAM,CACfC,UAAU,GAAD,OAAKF,EAAL,eACTG,UAAU,GAAD,OAAKH,EAAL,gBCiDEI,MA3Cf,YAAyC,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAAU,EACCtD,EAAO,CACxCC,IAAI,GAAD,OAAKgD,EAAIC,WAAT,OAAqBI,KADpB1D,EAD4B,EAC5BA,KAAMF,EADsB,EACtBA,UAAWC,EADW,EACXA,QADW,GAM/BD,IAAcC,GAAW+B,EAAa9B,GADnC4B,EAL4B,EAK5BA,IAAKC,EALuB,EAKvBA,IAAKE,EALkB,EAKlBA,OAAQU,EALU,EAKVA,OAEpBkB,GAAc7D,IAAcC,GHbf,SAAC6D,EAAMC,GAC1B,IAEI,OADkBD,EAAKE,MAAK,SAAAC,GAAI,OAAIA,EAAKF,KAAOA,KAAxCG,MAEV,MAAOC,GACL,KAAM,qCGQmCC,CAAQT,EAAUC,GAE/D,OAAO5D,EACH,yBAAKoB,UAAU,6DACX,kBAAC,IAAD,OAEJnB,EACA,yBAAKmB,UAAU,iCAAf,0CAIA,oCACI,yBAAKA,UAAU,QACX,6BACI,yCADJ,IACuByC,GAEvB,6BACI,sCADJ,IACoB5B,GAEpB,6BACI,6CADJ,IAC2BF,GAE3B,6BACI,4CADJ,IAC0BD,IAG9B,kBAACX,EAAD,CAAOjB,KAAMyC,M,OCEV0B,MApCf,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACJC,EADI,KACEC,EADF,OAE0BlE,EAAO,CAAEC,IAAKgD,EAAIE,YAA/CvD,EAFG,EAEHA,KAAMF,EAFH,EAEGA,UAAWC,EAFd,EAEcA,QAEnB0D,EAAWzD,EAAKgD,KAAI,SAAAZ,GAAE,MAAK,CAAEc,MAAOd,EAAGyB,GAAIU,MAAOnC,EAAG4B,UAM3D,OAAOlE,EACH,yBAAKoB,UAAU,6DACX,kBAAC,IAAD,OAEJnB,EACA,yBAAKmB,UAAU,iCAAf,0CAIA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CACIA,UAAU,cACVgC,MAAOmB,EACPG,SAlBG,SAAAH,GACfC,EAAQD,IAkBII,QAAShB,EACTiB,YAAY,oBAGpB,yBAAKxD,UAAU,aACVmD,GAAQ,kBAAC,EAAD,CAAUZ,SAAUzD,EAAM0D,OAAQW,EAAKnB,WC3B5CyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,MAAK,SAAA2E,GACjCA,EAAaC,kB","file":"static/js/main.f9705619.chunk.js","sourcesContent":["export const fetchReducer = (state, action) => {\n    switch (action.type) {\n        case \"FETCH_INIT\":\n            return {\n                ...state,\n                isLoading: true,\n                isError: false\n            };\n        case \"FETCH_SUCCESS\":\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.payload\n            };\n        case \"FETCH_FAILURE\":\n            return {\n                ...state,\n                isLoading: false,\n                isError: true\n            };\n        default:\n            throw new Error();\n    }\n};\n","import { useEffect, useReducer } from \"react\";\n\nimport { fetchReducer } from \"./reducers\";\n\nconst initialState = {\n    isLoading: false,\n    isError: false,\n    data: []\n};\n\nfunction useAPI({ url }) {\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            dispatch({\n                type: \"FETCH_INIT\"\n            });\n            try {\n                const result = await fetch(`${url}`).then(resp => resp.json());\n                dispatch({\n                    type: \"FETCH_SUCCESS\",\n                    payload: result\n                });\n            } catch (error) {\n                dispatch({\n                    type: \"FETCH_FAILURE\"\n                });\n            }\n        };\n\n        fetchData();\n    }, [url]);\n\n    return state;\n}\n\nexport default useAPI;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { BarChart, Bar, XAxis, LabelList } from \"recharts\";\n\nexport default function Chart({ data }) {\n    return (\n        <div className=\"barchart-wrapper\">\n            <BarChart\n                width={10000}\n                height={250}\n                data={data}\n                margin={{ top: 20 }}\n            >\n                <XAxis dataKey=\"date\" />\n                <Bar dataKey=\"value\" stackId=\"value\" fill=\"#2684FF\">\n                    <LabelList dataKey=\"value\" position=\"top\" />\n                </Bar>\n            </BarChart>\n        </div>\n    );\n}\n\nChart.propTypes = {\n    data: PropTypes.array.isRequired\n};\n","/**\n * @param  {array} list\n * @param  {number} id\n */\nexport const getName = (list, id) => {\n    try {\n        const { title } = list.find(item => item.id === id);\n        return title;\n    } catch (error) {\n        throw 'Check args. provided to \"getName\"';\n    }\n};\n\nexport const zeroCondition = { min: null, max: null };\n\n/**\n * @param  {array} arr // for the sake of the test task: O(n).\n */\nexport const findMinMax = (arr = []) => {\n    arr.reduce(\n        (acc, it) => {\n            console.log(it);\n            const [, val] = it;\n            const { min, max } = acc;\n\n            if (!min) return { min: val, max: val };\n\n            return {\n                ...acc,\n                min: val < min ? val : min,\n                max: val > max ? val : max\n            };\n        },\n        zeroCondition\n    );};\n\n/**\n * @param  {array} series\n */\nexport const sortTimeSeries = (series = []) => {\n    return series.sort(\n        ([time1], [time2]) =>\n            new Date(time1).getTime() - new Date(time2).getTime()\n    );\n};\n","import dateFormat from \"dateformat\";\nimport { findMinMax, sortTimeSeries } from \"../utils\";\n\nexport const cityDataToFE = data => {\n    const { status, timeseries } = data;\n    const { min, max } = findMinMax(timeseries);\n    const sortedTimeseries = sortTimeSeries(timeseries);\n\n    return {\n        min,\n        max,\n        status,\n        series: sortedTimeseries.map(([date, value]) => ({\n            date: dateFormat(date, \"dd mmm yyyy\"),\n            value\n        }))\n    };\n};\n","export const BASE_URL = 'https://city-json-serve.herokuapp.com';\n\nexport const API = {\n    CITY_DATA: `${BASE_URL}/city-data/`,\n    CITY_LIST: `${BASE_URL}/city-list/`\n};;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chart from \"../chart-component/ChartComponent\";\nimport MDSpinner from \"react-md-spinner\";\nimport useAPI from \"../../hooks/useAPI\";\nimport { getName } from \"../../utils\";\nimport { cityDataToFE } from \"../../mappers\";\n\nimport { API } from \"../../CONSTS\";\n\nfunction CityData({ cityList, cityId }) {\n    const { data, isLoading, isError } = useAPI({\n        url: `${API.CITY_DATA}${cityId}`\n    });\n\n    const { min, max, status, series } =\n        !isLoading && !isError && cityDataToFE(data);\n    const counryName = !isLoading && !isError && getName(cityList, cityId);\n\n    return isLoading ? (\n        <div className=\"d-flex whole-wp justify-content-center align-items-center\">\n            <MDSpinner />\n        </div>\n    ) : isError ? (\n        <div className=\"d-flex justify-content-center\">\n            SERVER ERROR: Something went wrong ...\n        </div>\n    ) : (\n        <>\n            <div className=\"data\">\n                <div>\n                    <b>City Name:</b> {counryName}\n                </div>\n                <div>\n                    <b>Status:</b> {status}\n                </div>\n                <div>\n                    <b>Highest value:</b> {max}\n                </div>\n                <div>\n                    <b>Lowest value:</b> {min}\n                </div>\n            </div>\n            <Chart data={series} />\n        </>\n    );\n}\n\nCityData.propTypes = {\n    cityList: PropTypes.array.isRequired,\n    cityId: PropTypes.string.isRequired\n};\n\nexport default CityData;\n","import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport useAPI from \"./hooks/useAPI\";\nimport CityData from \"./components/city-data/CityData\";\nimport MDSpinner from \"react-md-spinner\";\nimport { API } from \"./CONSTS\";\n\nimport \"./App.css\";\n\nfunction App() {\n    const [city, setCity] = useState(null);\n    const { data, isLoading, isError } = useAPI({ url: API.CITY_LIST });\n\n    const cityList = data.map(it => ({ value: it.id, label: it.title }));\n\n    const selectCity = city => {\n        setCity(city);\n    };\n\n    return isLoading ? (\n        <div className=\"d-flex whole-wp justify-content-center align-items-center\">\n            <MDSpinner />\n        </div>\n    ) : isError ? (\n        <div className=\"d-flex justify-content-center\">\n            SERVER ERROR: Something went wrong ...\n        </div>\n    ) : (\n        <div className=\"main-container\">\n            <div className=\"city-list\">\n                <Select\n                    className=\"city-select\"\n                    value={city}\n                    onChange={selectCity}\n                    options={cityList}\n                    placeholder=\"Select City...\"\n                />\n            </div>\n            <div className=\"city-data\">\n                {city && <CityData cityList={data} cityId={city.value} />}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}