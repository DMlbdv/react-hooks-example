{"version":3,"sources":["hooks/useAPI.js","components/chart-component/ChartComponent.js","mappers/index.js","utils/index.js","CONSTS.js","components/city-data/CityData.js","App.js","serviceWorker.js","index.js"],"names":["useAPI","url","useState","data","setData","isLoading","setIsLoading","isError","setIsError","useEffect","a","async","fetch","then","resp","json","result","fetchData","Chart","className","width","height","margin","top","dataKey","stackId","fill","position","cityDataToFE","status","timeseries","arr","reduce","acc","it","val","min","max","findMinMax","series","sort","time1","time2","Date","getTime","sortTimeSeries","map","date","value","dateFormat","process","NODE_ENV","PUBLIC_URL","BASE_URL","API","CITY_DATA","CITY_LIST","CityData","id","cityList","cityId","counryName","find","item","title","App","city","setCity","label","onChange","options","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74929f05.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useAPI({url}) {\n    const [data, setData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n  \n    useEffect(() => {\n        const fetchData = async () => {\n            setIsLoading(true);\n            setIsError(false);\n            try {\n                const result = await fetch(`${url}`).then(resp => resp.json());\n                setData(result);\n            } catch (error) {\n                setIsError(true);\n            }\n    \n            setIsLoading(false);\n        };\n\n        fetchData();\n    }, [url]);\n  \n    return {data, isLoading, isError};\n}\n\nexport default useAPI;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BarChart, Bar, XAxis, LabelList } from 'recharts';\n\nexport default function Chart({data}) {\n    return (\n        <div className=\"barchart-wrapper\">\n            <BarChart\n                width={10000}\n                height={250}\n                data={data}\n                margin={{top: 20}}\n            >\n                <XAxis dataKey=\"date\" />\n                <Bar dataKey=\"value\" stackId=\"value\" fill=\"#2684FF\">\n                    <LabelList dataKey=\"value\" position=\"top\" />\n                </Bar>\n            </BarChart>\n        </div>\n    );\n}\n\nChart.propTypes = {\n    data: PropTypes.array.isRequired\n};\n","import dateFormat from 'dateformat';\nimport { findMinMax, sortTimeSeries } from '../utils';\n\nexport const cityDataToFE = data => {\n    const {status, timeseries} = data;\n    const {min, max} = findMinMax(timeseries);\n    const sortedTimeseries = sortTimeSeries(timeseries);\n\n    return {\n        min,\n        max,\n        status,\n        series: sortedTimeseries.map(([date, value]) => (\n            {\n                date: dateFormat(date, 'dd mmm yyyy'),\n                value,\n            }\n        ))\n\n    };\n};\n","/**\n * @param  {array} list\n * @param  {number} id\n */\nexport const getName = (list, id) => {\n    const {title} = list.find(item => item.id === id);\n    return title;\n};\n  \n/**\n   * @param  {array} arr // for the sake of the test task: O(n).\n   */\nexport const findMinMax = (arr = []) => (\n    arr.reduce((acc, it) => {\n        const [, val] = it;\n        const {min, max} = acc;\n  \n        if(!min)  return {min: val, max: val};\n  \n        return {\n            ...acc,\n            min: (val < min) ? val : min, max : (val > max) ? val : max\n        };\n    }, {min: null, max: null})\n);\n\n/**\n   * @param  {array} series\n   */\nexport const sortTimeSeries = (series = []) => {\n    return series.sort(([time1,], [time2,]) => (\n        new Date(time1).getTime() - new Date(time2).getTime()\n    ));\n};","const { NODE_ENV, PUBLIC_URL } = process.env;\n\nexport const BASE_URL = NODE_ENV === 'development' ? 'http://localhost:3000' : PUBLIC_URL;\n\nexport const API = {\n    CITY_DATA: `${BASE_URL}/city-data/`,\n    CITY_LIST: `${BASE_URL}/city-list/`\n};;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from '../chart-component/ChartComponent';\nimport MDSpinner from 'react-md-spinner';\nimport useAPI from '../../hooks/useAPI';\nimport { getName } from '../../utils';\nimport { cityDataToFE } from '../../mappers';\n\n\nimport { API } from '../../CONSTS';\n\nfunction CityData({cityList, cityId}) {\n    const { data, isLoading, isError } = useAPI({url: `${API.CITY_DATA}${cityId}`});\n\n    const {min, max, status, series} = !isLoading && !isError && cityDataToFE(data);\n    const counryName = !isLoading && !isError && getName(cityList, cityId);\n\n    return (\n        isLoading ? <div className=\"d-flex justify-content-center\"><MDSpinner /></div>\n            : isError ? <div>Something went wrong ...</div>\n                : <>\n                    <div className=\"data\">\n                        <div><b>City Name:</b> {counryName}</div>\n                        <div><b>Status:</b> {status}</div>\n                        <div><b>Highest value:</b> {max}</div>\n                        <div><b>Lowest value:</b> {min}</div>\n                    </div>\n                    <Chart\n                        data={series}\n                    />\n\n                </>\n    );\n}\n\nCityData.propTypes = {\n    cityList: PropTypes.array.isRequired,\n    cityId: PropTypes.string.isRequired\n};\n\nexport default CityData;\n","import React, { useState } from 'react';\nimport Select from 'react-select';\nimport useAPI from './hooks/useAPI';\nimport CityData from './components/city-data/CityData';\nimport MDSpinner from 'react-md-spinner';\nimport { API } from './CONSTS';\n\nimport './App.css';\n\nfunction App() {\n\n    const [city, setCity] = useState(null);\n    const {data, isLoading, isError} = useAPI({url: API.CITY_LIST});\n    \n    const cityList = data.map(it => ({value: it.id, label: it.title}));\n\n    const selectCity = city => {\n        setCity(city);\n    };\n\n    return (\n        isLoading ? <div className=\"d-flex justify-content-center\"><MDSpinner /></div>\n            : isError ? <div>Something went wrong ...</div>\n                : <div className=\"main-container\">\n                    <div className=\"city-list\">\n                        <Select\n                            className=\"city-select\"\n                            value={city}\n                            onChange={selectCity}\n                            options={cityList}\n                            placeholder=\"Select City...\"\n                        />\n                    </div>\n                    <div className=\"city-data\">\n                        {city &&\n                            <CityData\n                                cityList={data}\n                                cityId={city.value}\n                            />\n                        }\n                    </div>\n                </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}